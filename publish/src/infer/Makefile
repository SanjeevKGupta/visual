#
# Makefile for tflite/vino/mvi : Tensor Flow Lite / Intel OpneVINO / IBM MVI OpenCV Object Classification
#

# Check all necessary environment variables
-include ../../env.check.mk

export CR_DST=us.icr.io
export CR_NAMESPACE_DST=ieam-mvi

export ARCH ?= $(shell hzn architecture)

# Import variables from hzn.json (file is generated by last target in this file)
-include .hzn.json.tmp.mk

model-mvi: model-mvi-publish-service 

mi-mvi: mi-mvi-build mi-mvi-push mi-mvi-publish-service mi-mvi-deploy-policy

# Build the docker container
tflite-build:
	 envsubst < ./Dockerfile.tflite.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE) . -f -

pth-build:
	 envsubst < ./Dockerfile.pth.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_PTH)_$(ARCH):$(SERVICE_VERSION_PTH) . -f -

vino-build:
	 envsubst < ./Dockerfile.vino.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO) . -f -

mi-mvi-build:
	 envsubst < ./Dockerfile.mvi.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_MI_MVI)_$(ARCH):$(SERVICE_VERSION_MI_MVI) . -f -

# Push the docker container to the DockerHub registry
tflite-push:
	docker push $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE)

pth-push:
	docker push $(DOCKER_IMAGE_BASE_PTH)_$(ARCH):$(SERVICE_VERSION_PTH)

vino-push:
	docker push $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO)

mi-mvi-push:
	docker push $(DOCKER_IMAGE_BASE_MI_MVI)_$(ARCH):$(SERVICE_VERSION_MI_MVI)

# Publish a Horizon service (per service.json) and pull image to get its sha256
tflite-publish-service:
	hzn exchange service publish -f horizon/$(IMAGE_NAME_TFLITE).service.definition.json --pull-image

pth-publish-service:
	hzn exchange service publish -f horizon/$(IMAGE_NAME_PTH).service.definition.json --pull-image

vino-publish-service:
	hzn exchange service publish -f horizon/$(IMAGE_NAME_VINO).service.definition.json --pull-image

model-mvi-publish-service:
	docker login -u iamapikey -p $(APP_CR_API_KEY_RO_PULL) $(CR_DST)
	hzn exchange service publish -f horizon/$(IMAGE_NAME_MODEL_MVI).service.definition.json --pull-image -r "$(CR_DST):iamapikey:$(APP_CR_API_KEY_RO_PULL)" 

model-mvi-p100-publish-service:
	docker login -u iamapikey -p $(APP_CR_API_KEY_RO_PULL) $(CR_DST)
	hzn exchange service publish -f horizon/$(IMAGE_NAME_MODEL_MVI_P100).service.definition.json --pull-image -r "$(CR_DST):iamapikey:$(APP_CR_API_KEY_RO_PULL)" 

mi-mvi-publish-service:
	hzn exchange service publish -f horizon/$(IMAGE_NAME_MI_MVI).service.definition.json --pull-image

mi-mvi-p100-publish-service:
	hzn exchange service publish -f horizon/$(IMAGE_NAME_MI_MVI_P100).service.definition.json --pull-image

# pattern publish
model-mvi-p100-publish-pattern:
	hzn exchange pattern publish -f horizon/$(IMAGE_NAME_MODEL_MVI_P100).pattern.json

# Deployment policy
tflite-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_TFLITE).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_TFLITE)_$(ARCH)

pth-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_PTH).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_PTH)_$(ARCH)

vino-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_VINO).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_VINO)_$(ARCH)

mi-mvi-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_MI_MVI).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_MI_MVI)_$(ARCH)

mi-mvi-p100-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_MI_MVI_P100).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_MI_MVI_P100)_$(ARCH)

#mvi-max deploys as requiredService in mvi deployment
#mvi-hv-max deploys as requiredService in mvi deployment

#-------------------------------
test-docker-run-tflite:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE) /bin/bash

test-docker-run-vino:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE --privileged -v /dev:/dev --network=host --mount type=bind,source=/tmp,target=/test $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO) /bin/bash 

test-docker-run-mvi:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE --privileged -v /tmp:/tmp $(DOCKER_IMAGE_BASE_MVI)_$(ARCH):$(SERVICE_VERSION_MVI) /bin/bash

# Remove the local container image
clean:
	rm -f .hzn.json.tmp.mk

# This imports the variables from hzn.json
.hzn.json.tmp.mk: horizon/hzn.json
	@ hzn util configconv -f $< > $@

